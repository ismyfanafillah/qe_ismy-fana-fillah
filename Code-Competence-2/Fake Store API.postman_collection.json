{
	"info": {
		"_postman_id": "3387fbf0-6568-42b8-b6ec-ce8660ba903e",
		"name": "Fake Store API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33061954"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "Login with valid credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Request body should match expected format and values\", () => {\r",
									"    const actualRequestBody = JSON.parse(pm.request.body.raw);\r",
									"    const expectedRequestBody = {\r",
									"        \"username\": \"mor_2314\",\r",
									"        \"password\": \"83r5^_\"\r",
									"    };\r",
									"\r",
									"    pm.expect(actualRequestBody).to.eql(expectedRequestBody);\r",
									"});\r",
									"\r",
									"pm.test(\"Response Content-Type header is 'application/json'\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Data in the response should not be empty\", () => {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.token).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Data field should exist and be of type string\", () => {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object'); \r",
									"  pm.expect(responseData.token).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000); \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"mor_2314\",\r\n    \"password\": \"83r5^_\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{FAKE_STORE_URL}}/auth/login",
							"host": [
								"{{FAKE_STORE_URL}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with empty JSON body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", () => {\r",
									"  pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Request body should be empty\", () => {\r",
									"    const actualRequestBody = JSON.parse(pm.request.body.raw);\r",
									"    const expectedRequestBody = {\r",
									"            \"email\": \"\",\r",
									"            \"password\": \"\"\r",
									"            };\r",
									"\r",
									"    pm.expect(actualRequestBody).to.eql(expectedRequestBody);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains the expected string 'not found'\", () => {\r",
									"    pm.response.to.be.badRequest;\r",
									"    pm.expect(pm.response.text());\r",
									"    pm.response.to.be.not.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"\",\r\n    \"password\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{FAKE_STORE_URL}}/auth/login",
							"host": [
								"{{FAKE_STORE_URL}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Product",
			"item": [
				{
					"name": "Get a single product by valid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must be valid and have a body\", () => {",
									"     pm.response.to.be.ok;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains product ID\", () => {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(pm.variables.get(\"products_id\"));",
									"});",
									"",
									"pm.test(\"Response content type is application/json\", () => {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response data object should have ID, Title, Price, Description, Category, Image, Rating\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson).to.have.property('title');",
									"    pm.expect(responseJson).to.have.property('price');",
									"    pm.expect(responseJson).to.have.property('description');",
									"    pm.expect(responseJson).to.have.property('category');",
									"    pm.expect(responseJson).to.have.property('image');",
									"    pm.expect(responseJson).to.have.property('rating');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test(\"Product ID\", () => {\r",
									"    pm.environment.set(\"products_id\", 1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{FAKE_STORE_URL}}/products/1",
							"host": [
								"{{FAKE_STORE_URL}}"
							],
							"path": [
								"products",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a single product by invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 404\", () => {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains the expected 'error'\", () => {\r",
									"    const responseData = pm.response.json()\r",
									"\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.be.notFound;\r",
									"    pm.expect(responseData).to.have.property('error')\r",
									"    pm.expect(responseData.error).to.be.a('string')\r",
									"    pm.expect(responseData.error).to.equal('not found');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{FAKE_STORE_URL}}/products/21",
							"host": [
								"{{FAKE_STORE_URL}}"
							],
							"path": [
								"products",
								"21"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add new product with JSON body format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must be valid and have a body\", () => {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"})\r",
									"\r",
									"pm.test(\"Response status code should have 200 value\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response content type is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response data object should have ID, Title, Price, Description, Image, and Category properties\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property('id');\r",
									"    pm.expect(responseJson).to.have.property('title');\r",
									"    pm.expect(responseJson).to.have.property('price');\r",
									"    pm.expect(responseJson).to.have.property('description');\r",
									"    pm.expect(responseJson).to.have.property('image');\r",
									"    pm.expect(responseJson).to.have.property('category');\r",
									"});\r",
									"\r",
									"pm.test(\"Request body should match expected format and values\", () => {\r",
									"    const actualRequestBody = JSON.parse(pm.request.body.raw);\r",
									"    const expectedRequestBody = {\r",
									"        \"title\": \"test product\",\r",
									"        \"price\": 13.5,\r",
									"        \"description\": \"lorem ipsum set\",\r",
									"        \"image\": \"https://i.pravatar.cc\",\r",
									"        \"category\": \"electronic\"\r",
									"    };\r",
									"\r",
									"    pm.expect(actualRequestBody).to.eql(expectedRequestBody);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"test product\",\r\n    \"price\": 13.5,\r\n    \"description\": \"lorem ipsum set\",\r\n    \"image\": \"https://i.pravatar.cc\",\r\n    \"category\": \"electronic\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{FAKE_STORE_URL}}/products",
							"host": [
								"{{FAKE_STORE_URL}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add new product with empty JSON body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code should be 400 for bad request\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should contain error message for empty JSON body\", () => {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.response.to.be.badRequest;\r",
									"    pm.expect(responseData).to.not.be.empty;\r",
									"    pm.expect(responseData).to.have.property('error');\r",
									"    pm.expect(responseData.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Request body should be empty\", () => {\r",
									"    const actualRequestBody = JSON.parse(pm.request.body.raw);\r",
									"    const expectedRequestBody = {\r",
									"        \"title\": \"\",\r",
									"        \"price\": \"\",\r",
									"        \"description\": \"\",\r",
									"        \"image\": \"\",\r",
									"        \"category\": \"\"\r",
									"    };\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"\",\r\n    \"price\": \"\",\r\n    \"description\": \"\",\r\n    \"image\": \"\",\r\n    \"category\": \"\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{FAKE_STORE_URL}}/products",
							"host": [
								"{{FAKE_STORE_URL}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cart",
			"item": [
				{
					"name": "Get single cart with valid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must be valid and have a body\", () => {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains carts ID\", () => {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(pm.variables.get(\"carts_id\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response content type is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response data object should have ID, User ID, Date, Products, and Version properties\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property('id');\r",
									"    pm.expect(responseJson).to.have.property('userId');\r",
									"    pm.expect(responseJson).to.have.property('date');\r",
									"    pm.expect(responseJson).to.have.property('products');\r",
									"    pm.expect(responseJson).to.have.property('__v');\r",
									"\r",
									"    pm.expect(responseJson.products).to.be.an('array');\r",
									"    pm.expect(responseJson.products).to.have.length.above(0);\r",
									"\r",
									"    responseJson.products.forEach(product => {\r",
									"        pm.expect(product).to.have.property('productId');\r",
									"        pm.expect(product).to.have.property('quantity');\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test(\"Cart ID\", () => {\r",
									"    pm.environment.set(\"carts_id\", 1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{FAKE_STORE_URL}}/carts/1",
							"host": [
								"{{FAKE_STORE_URL}}"
							],
							"path": [
								"carts",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a single cart with invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", () => {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains the expected 'error'\", () => {\r",
									"    const responseData = pm.response.json()\r",
									"\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.be.notFound;\r",
									"    pm.expect(responseData).to.have.property('error')\r",
									"    pm.expect(responseData.error).to.be.a('string')\r",
									"    pm.expect(responseData.error).to.equal('not found');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{FAKE_STORE_URL}}/carts/21",
							"host": [
								"{{FAKE_STORE_URL}}"
							],
							"path": [
								"carts",
								"21"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Get single user with valid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must be valid and have a body\", () => {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains carts ID\", () => {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(pm.variables.get(\"carts_id\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response content type is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response data object should have Address, ID, Email, Username, Password, Name, Phone, and Version properties\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    // Check top-level properties\r",
									"    pm.expect(responseJson).to.have.property('address');\r",
									"    pm.expect(responseJson).to.have.property('id');\r",
									"    pm.expect(responseJson).to.have.property('email');\r",
									"    pm.expect(responseJson).to.have.property('username');\r",
									"    pm.expect(responseJson).to.have.property('password');\r",
									"    pm.expect(responseJson).to.have.property('name');\r",
									"    pm.expect(responseJson).to.have.property('phone');\r",
									"    pm.expect(responseJson).to.have.property('__v');\r",
									"    \r",
									"    // Check address properties\r",
									"    pm.expect(responseJson.address).to.have.property('geolocation');\r",
									"    pm.expect(responseJson.address).to.have.property('city');\r",
									"    pm.expect(responseJson.address).to.have.property('street');\r",
									"    pm.expect(responseJson.address).to.have.property('number');\r",
									"    pm.expect(responseJson.address).to.have.property('zipcode');\r",
									"    \r",
									"    // Check geolocation properties\r",
									"    pm.expect(responseJson.address.geolocation).to.have.property('lat');\r",
									"    pm.expect(responseJson.address.geolocation).to.have.property('long');\r",
									"    \r",
									"    // Check name properties\r",
									"    pm.expect(responseJson.name).to.have.property('firstname');\r",
									"    pm.expect(responseJson.name).to.have.property('lastname');\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{FAKE_STORE_URL}}/users/1",
							"host": [
								"{{FAKE_STORE_URL}}"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a single user with invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 404\", () => {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains the expected 'error'\", () => {\r",
									"    const responseData = pm.response.json()\r",
									"\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.be.notFound;\r",
									"    pm.expect(responseData).to.have.property('error')\r",
									"    pm.expect(responseData.error).to.be.a('string')\r",
									"    pm.expect(responseData.error).to.equal('not found');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{FAKE_STORE_URL}}/users/11",
							"host": [
								"{{FAKE_STORE_URL}}"
							],
							"path": [
								"users",
								"11"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "FAKE_STORE_URL",
			"value": "https://fakestoreapi.com",
			"type": "string"
		}
	]
}