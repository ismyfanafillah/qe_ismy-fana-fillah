# Resume Live Session QE 1-3

## (01) Software Testing Fundamental

1. Software testing merupakan proses analisis item perangkat lunak berdasarkan kondisi aktual (kondisi sekarang) dengan ekspetasinya (kondisi yang diharapkan). Software testing sangat penting dalam pengembangan perangkat lunak sebelum produk diluncurkan kepada klien karena save money, product quality, security, costumer satisfication
2. Testing Platform dibedakan menjadi 4 yaitu API, Website, Mobile, dan Dekstop. Selain perlu memahami jenis testing platform, perlu diketahui juga tipe dari software testing. Tipe software testing dibagi menjadi dua yaitu Functional testing (manual testing dan automate testing) dan Non-Functional testing (Performance testing), dan Maintenance testing (Regression testing)
3. Dalam software testing terdapat level testing. Pertama, Unit testing sebagai pengujian perangkat lunak yang menguji setiap unit atau komponen dari sebuah perangkat lunak dan dilakukan saat masa development. Kedua, Integration testing sebagai pengujian dari hasil unit-unit testing yang ada dalam perangkat lunak dan dilakukan secara bertahap untuk memeriksa fungsi maupun kinerja software berjalan dengan baik, biasanya pengujian dilakukan dalam bentuk kombinasi atau rangkaian unit gabungan bukan sebagai unit indivisual lagi. Ketiga, System testing sebagai testing yang dilakukan pada satu keseluruhan sistem yang dilakukan, yaitu end to end testing untuk meverifikasi semua skenario telah berjalan dengan baik yang mana cakupannya akan mengetes aspek aspek fungsional dan non dari sebuah perangkat lunak. Terakhir, Acceptance testing digunakan untuk menentukan apakah sistem yang didevelope telah memenuhi ebutuhan pengguna dan dapat dilakukan pada tahap terakhir proses pengujian yaitu seeum sistem diserahkan kepada pengguna. 


## (02) Software Testing as a Career Path

1. Software testing merupakan proses verifikasi sistem atau program komputer untuk memutuskan apakah memenuhi persyasratan yang ditentukan dan hasil yang diinginkan/ekspetasi. Sebagai hasilnya nanti seorang software tester akan mengidentifikasi apakah dalam suatu produk atau proyek perangkat lunak terdapat bug atau tidak. Oleh karena itu banyak skill yang diperlukan untuk menjadi seorang software tester. Skills yang diperlukan untuk menjadi seorang software tester dibagi menjadi dua jenis yaitu  Non-technical skills dan Technical skills. Non-technical skills diantaranya seperti analytical skill, communication skill, time management and organization skill, great attitude, maupun passion. Sedangkan Technical skills diantaranya seperti memiliki basic knowlede of unix/linux commands, knowledge and hans on experienxe of a 'test management tools', knowledge and hans on experienxe of a 'tracking management tools', knowledge and hans on experienxe of a 'automation testing tools', dan masih banyak skill lainnya yang mendukung dan diperlukan untuk menjadi software tester.
2. Hal-hal yang perlu dilakukan sebagai seorang sofware tester diantaranya pertama yaitu memahami kebutuhan dokumen untuk pembuatan sebuah sistem atau fitur,lakukan dengan mengidentifikasi terlebih dahulu kebutuhannya yang diuji oleh siapa dan apa saja. Kedua, membuat test cases (seragkaian rancangan tindakan yang akan/ingin dilaksanakan untuk memverifikasi fitur tertentu atau fungsi dari suatu aplikasi) sebagai planning pengujian maupun fitur apa saja yang dapat dijadikan sebagai case yang mungkin djalankan user (ada case positif dan negatif). Ketiga, menjalankan test cases yang ada yang telah dibuat, setelah membuat test case maka software tester akan menjalankan atau mulai melakukan pengujian dari test case tersebut yang harus dilakukan secara teliti dan mendetail agar tidak ada yang terlewat untuk mengidentifikasi adanya bugs. Keempat, melakukan reporting dan pengujian kembali jika terdapat bugs, report berisi pengujian terhadap fitur yang akan digunakan user secara menyeluruh yang mana jika ditemukan bugs perlu membuat dokumentasi dengan detail agar mudah dipahami oleh tim developer yang akan memperbaiki produk, kemudian dilakukan pengujian kembali untuk memastikan apakah perbaikan sudah sesuai atau masih adakah bugs pada produk. Terakhir, mengikuti rapat atau meeting bersama stakeholder yang lain.
3. Career Path seorang software tester tidak jauh dari menjadi Quality Engineer : Junior Quality Engineer (Fresher), Quality Engineer (1-2 years experience). Senior Quality Engineer (>3 years experience), Quality Engineer Lead (5-6 years experience), Quality Engineer Manager (8-11 years experience). Selain menjadi seorang Quality Engineer tentu masih ada alternate career bagi software tester diantaranya seperti performance terter, penetration tester, system analyst, dan scrum master. Sebelum itu, utuk menjadi seorang software tester terdapat beberapa hal yang perlu yang harus dilakukan diantaranya mempelajari berbagai ilmu terkait software testing, mempelajari test case managament tools, mempelajari automation testing tools,serta membuat portofolo terkait testing untuk apply sebagai freelancer atau pekerja tetap. Beberapa automation testing tools yang dapat digunakan untuk mempermudah proses pengujian, pertama dalam hal pemrograman, tersedia pilihan bahasa seperti Java, JavaScript, dan Python. Kedua, untuk melakukan pengujian API, tersedia tools seperti Postman (open source) dan Katalon. Selanjutnya, untuk pengujian web, terdapat Serenity BDD yang dapat digunakan dengan Java, Playwright yang dapat digunakan dengan Java dan JavaScript, Cypress, Selenium yang biasanya menggunakan Java, serta Katalon. Untuk pengujian pada platform mobile, disarankan untuk menggunakan kombinasi Appium dan Serenity BDD yang open source, atau Katalon yang bersifat trial. Terakhir, untuk pengujian performa, disarankan untuk menggunakan Apache JMeter yang berbasis GUI untuk menyiapkan jumlah pengguna, mengirimkan permintaan, dan menjalankannya, atau k6 yang berbasis JavaScript. Semoga daftar tools otomatisasi ini dapat bermanfaat dalam proyek pengembangan perangkat lunak yang sedang dikerjakan

# (03) Versioning Control with Git

1. Versioning merupakan sebuah aktivitas untuk mengatur versi dari code program ketika mengambangkan program atau aplikasi kompeks. Versioning digunakan untuk mempertahankan versi sebelumny adari suatu program sebelum dilakukan revisi dengan harus buat file baru. Sehingga jika tidak menggunakan versioning maka untuk mengelola versi sebelumnya akan rumit. Tools yang digunakan untuk mengelola code progrma diantaranya VCS (Versioning control system), SCM (Source Code  Manager), RCS (Reversion Control System). VCS merupakan salah satu tools yang bisa digunakan untuk versioning, contoh yang termasuk VCS yaitu single user (hanya bisa digunakan oleh satu pengguna), centralized (terpusat), dan distributed (terdistribusi). Terdapat berbagai VCD yang bisa dimanfaatkan salah satunya git yang merupakan VCS populer yang digunakn para developer untuk megembangkan software bersama (berkolaborasi) dan sifatnya terdistribusi. Sistemnya terdistibusi maksudnya setiap pengguna atau user harus memiliki perubahan yang tersinkron. Untuk melalukan sinkronisasi perubahan bisa menggunakan git. Dalam sebuah git terdapat git repository yaitu sebuah projek untuk melakukan versioning yang mana dalam satu repository bisa terdiri dari folder dan file, serta histori commit yang telah dilakukan. Git juga melakukan tracking setiap perubahan sendiri maupun orang lain terhadap perubahan pada file dan digunakan commit untuk menyimpan perubahan tersebut. Terdapat banyak Git commands yang dapat digunakan seperti `git init`, `git clone`, `git config`, `git add`, `git commit`, `git message`, `git diff`, `git stash`, `git log`, `git checkout`, `git push`, `git fetch`, `git pull`, `git branch`, `git merge`, dan lainnya.
2. Gitflow dapat diterapkan dalam mengembangkan sebuah aplikasi yaitu digunakan untuk memisahkan versi yang masih dikembangkan, versi yang siap dikembangkan, dan versi untuk pengembangan sistem fitur tertentu. Jika tidak mengggunakan gitflow maka aliran alurnya hanya satu arah dan pengembangan akan dicommit langsung di branch utama. Jika aplikasi kompleks, maka untk branch managementnya sulit karena terpusat pada satu branch saja sehingga ketika ingin melakukan rollback akan sulit dan penyelesaian saat mengembangkan versi maka pemecahan atau pemisahan dilakukan dibranch utama dan dibuat branch baru berdasarkan fiturnya. Solusi dari hal tersebut yang lebih baik yaitu dengan melakukan pemecahan atau pemisahan branch untuk aplikasi yang siap digunaknan dan splikasi yang sedang di develop. Jadi dari branch utama, dbuat branch baru yaitu branch develop, ketika ada pengembangan baru maka dilakukan pemecahan lagi branchnya untuk mengembangkan fitur tersebut dari branch develop,kemudian hasil akhirnya akan digabungkan ke branch develop dan hasilnya digabungkan ke branch main atau master.
3. Pull request merupakan fitur yang dapat dimanfaatkan untuk menggabungkan perubahan yang terdapat pada branch develop ke branch main dalam sebuah repository. Proses penggunaan pull request dimulai dengan langkah pertama yaitu melakukan pengecekan lokasi branch dengan perintah `git branch` dan melakukan push perubahan ke branch develop di repository dengan perintah `git push origin develop`. Selanjutnya, disarankan untuk membuat pull request dengan membuka halaman GitHub terkait. Pada halaman tersebut, pengguna dapat membuka pull request dan melakukan perbandingan antara branch yang akan digabungkan (base) dan branch yang akan digunakan untuk penggabungan (compare), misalnya branch develop ke branch main. Selain itu, pengguna juga diminta untuk menambahkan judul yang jelas pada pull request, mengisi review dan assignee sesuai dengan kebutuhan, serta menetapkan label yang sesuai. Deskripsi singkat juga perlu ditambahkan untuk menjelaskan perubahan yang dilakukan, seperti menambahkan file favorit. Setelah semua langkah tersebut selesai, pull request dapat dibuat dengan menekan tombol "Create Pull Request" dan statusnya akan tetap terbuka (open). Selanjutnya, pengguna perlu melakukan review terhadap perubahan yang diajukan. Apabila perubahan dianggap sudah memadai, pengguna dapat langsung melakukan penggabungan (merge). Namun, jika terdapat hal yang perlu direview lebih lanjut, pengguna dapat melakukan review lebih lanjut dengan mengklik opsi review. Setelah pull request berhasil digabungkan, langkah terakhir adalah melakukan sinkronisasi perubahan ke repository lokal dengan perintah `git pull origin main`. Dengan demikian, proses penggunaan pull request untuk menggabungkan branch develop ke main dapat dilakukan dengan langkah-langkah yang terstruktur dan sesuai dengan prosedur yang berlaku.